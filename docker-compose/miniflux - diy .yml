version: '3.9'

services:
  miniflux:
    image: miniflux/miniflux:latest
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable
      - RUN_MIGRATIONS=1
      - FETCH_YOUTUBE_WATCH_TIME=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=test123
      - BASE_URL=http://127.0.0.1:8080 # miniflux 的域名
      - POLLING_FREQUENCY=60 # 每个 feed 的刷新间隔
      - POLLING_PARSING_ERROR_LIMIT=0 # 拉取出错后不会停止拉去，还是会按计划继续拉
      - BATCH_SIZE=100 # 每次拉取的 feed 数量
      - POLLING_SCHEDULER=entry_frequency # 拉取类型，根据上周的平均更新周期来拉取
      - SCHEDULER_ENTRY_FREQUENCY_MAX_INTERVAL=30
      - PROXY_OPTION=all # 图片代理功能，Miniflux 先把源端的图片缓存到服务器上来，后续就不用客户端去源服务器拉了
      - PROXY_PRIVATE_KEY=password # 使用客户端缓存过文章，然后某个时间重启了 docker 实例，那么会导致图片无法显示的情况，这是因为每次重启会随机生成 PROXY_PRIVATE_KEY,所以可以增加参数 PROXY_PRIVATE_KEY 固化 key ，便于解决更新、重启等场景下的图片显示问题。
      - DATABASE_MAX_CONNS=50 # 增加数据库连接数，对于多图片的 feed 非常有效，可以大幅提升加载和访问速度
      - DATABASE_MIN_CONNS=5 # 同上
      - WORKER_POOL_SIZE=10  # 默认，或适当加大
  db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=miniflux
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=miniflux
    volumes:
      - miniflux-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "miniflux"]
      interval: 10s
      start_period: 30s
volumes:
  miniflux-db: